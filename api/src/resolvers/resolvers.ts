/*
 * File generated by Graphback CRUD resolver plugin.
 * Content will be overwritten by Graphback generator.
 * To change implementation please disable generator options and supply your own implementation
 * outside generated file.
 */

export default {
  User: {
    orders: (parent, args, context) => {
      return context.Order.batchLoadData("userId", parent.id, context)
    },
  },

  Order: {
    user: (parent, args, context) => {
      return context.User.findBy({ id: parent.userId }).then(
        (results) => results[0]
      )
    },
    rows: (parent, args, context) => {
      return context.OrderRow.batchLoadData("orderId", parent.id, context)
    },
    discountCodes: (parent, args, context) => {
      return context.DiscountCode.batchLoadData("orderId", parent.id, context)
    },
  },

  OrderRow: {
    order: (parent, args, context) => {
      return context.Order.findBy({ id: parent.orderId }).then(
        (results) => results[0]
      )
    },
    product: (parent, args, context) => {
      return context.Product.findBy({ id: parent.productId }).then(
        (results) => results[0]
      )
    },
  },

  Product: {
    orders: (parent, args, context) => {
      return context.OrderRow.batchLoadData("productId", parent.id, context)
    },
    brand: (parent, args, context) => {
      return context.Brand.findBy({ id: parent.brandId }).then(
        (results) => results[0]
      )
    },
  },

  Brand: {
    products: (parent, args, context) => {
      return context.Product.batchLoadData("brandId", parent.id, context)
    },
  },

  DiscountCode: {
    order: (parent, args, context) => {
      return context.Order.findBy({ id: parent.orderId }).then(
        (results) => results[0]
      )
    },
  },

  Query: {
    findUsers: (parent, args, context) => {
      const { fields, ...page } = args
      return context.User.findBy(fields, page)
    },
    findAllUsers: (parent, args, context) => {
      return context.User.findAll(args)
    },
    findOrders: (parent, args, context) => {
      const { fields, ...page } = args
      return context.Order.findBy(fields, page)
    },
    findAllOrders: (parent, args, context) => {
      return context.Order.findAll(args)
    },
    findOrderRows: (parent, args, context) => {
      const { fields, ...page } = args
      return context.OrderRow.findBy(fields, page)
    },
    findAllOrderRows: (parent, args, context) => {
      return context.OrderRow.findAll(args)
    },
    findProducts: (parent, args, context) => {
      const { fields, ...page } = args
      return context.Product.findBy(fields, page)
    },
    findAllProducts: (parent, args, context) => {
      return context.Product.findAll(args)
    },
    findBrands: (parent, args, context) => {
      const { fields, ...page } = args
      return context.Brand.findBy(fields, page)
    },
    findAllBrands: (parent, args, context) => {
      return context.Brand.findAll(args)
    },
    findDiscountCodes: (parent, args, context) => {
      const { fields, ...page } = args
      return context.DiscountCode.findBy(fields, page)
    },
    findAllDiscountCodes: (parent, args, context) => {
      return context.DiscountCode.findAll(args)
    },
  },

  Mutation: {
    createUser: (parent, args, context) => {
      return context.User.create(args.input, context)
    },
    updateUser: (parent, args, context) => {
      return context.User.update(args.input, context)
    },
    deleteUser: (parent, args, context) => {
      return context.User.delete(args.input, context)
    },
    createOrder: (parent, args, context) => {
      return context.Order.create(args.input, context)
    },
    updateOrder: (parent, args, context) => {
      return context.Order.update(args.input, context)
    },
    deleteOrder: (parent, args, context) => {
      return context.Order.delete(args.input, context)
    },
    createOrderRow: (parent, args, context) => {
      return context.OrderRow.create(args.input, context)
    },
    updateOrderRow: (parent, args, context) => {
      return context.OrderRow.update(args.input, context)
    },
    deleteOrderRow: (parent, args, context) => {
      return context.OrderRow.delete(args.input, context)
    },
    createProduct: (parent, args, context) => {
      return context.Product.create(args.input, context)
    },
    updateProduct: (parent, args, context) => {
      return context.Product.update(args.input, context)
    },
    deleteProduct: (parent, args, context) => {
      return context.Product.delete(args.input, context)
    },
    createBrand: (parent, args, context) => {
      return context.Brand.create(args.input, context)
    },
    updateBrand: (parent, args, context) => {
      return context.Brand.update(args.input, context)
    },
    deleteBrand: (parent, args, context) => {
      return context.Brand.delete(args.input, context)
    },
    createDiscountCode: (parent, args, context) => {
      return context.DiscountCode.create(args.input, context)
    },
    updateDiscountCode: (parent, args, context) => {
      return context.DiscountCode.update(args.input, context)
    },
    deleteDiscountCode: (parent, args, context) => {
      return context.DiscountCode.delete(args.input, context)
    },
  },
}
