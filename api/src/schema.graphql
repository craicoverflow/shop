## NOTE: This schema was generated by Graphback and should not be changed manually

"""@model"""
type Brand {
  id: ID!

  """@db.type: 'timestamp'"""
  createdAt: DateTime!

  """@db.type: 'timestamp'"""
  updatedAt: DateTime!

  """@db.unique"""
  name: String!
  slug: String!
  url: String!

  """@oneToMany field: 'brand', key: 'brandId'"""
  products: [Product]
}

input BrandInput {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  slug: String
  url: String
}

scalar DateTime

"""@model"""
type DiscountCode {
  id: ID!

  """@db.type: 'timestamp'"""
  createdAt: DateTime!

  """@db.type: 'timestamp'"""
  updatedAt: DateTime!
  code: String!
  name: String!
  description: String!
  type: DiscountCodeType!
  amount: Float!

  """@manyToOne field: 'discountCodes', key: 'orderId'"""
  order: Order
}

input DiscountCodeInput {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  code: String
  name: String
  description: String
  type: DiscountCodeType
  amount: Float
  orderId: ID
}

enum DiscountCodeType {
  Percentage
}

type Mutation {
  createUser(input: UserInput): User!
  updateUser(input: UserInput): User!
  deleteUser(input: UserInput): User!
  createOrder(input: OrderInput): Order!
  updateOrder(input: OrderInput): Order!
  deleteOrder(input: OrderInput): Order!
  createOrderRow(input: OrderRowInput): OrderRow!
  updateOrderRow(input: OrderRowInput): OrderRow!
  deleteOrderRow(input: OrderRowInput): OrderRow!
  createProduct(input: ProductInput): Product!
  updateProduct(input: ProductInput): Product!
  deleteProduct(input: ProductInput): Product!
  createDiscountCode(input: DiscountCodeInput): DiscountCode!
  updateDiscountCode(input: DiscountCodeInput): DiscountCode!
  deleteDiscountCode(input: DiscountCodeInput): DiscountCode!
  createBrand(input: BrandInput): Brand!
  updateBrand(input: BrandInput): Brand!
  deleteBrand(input: BrandInput): Brand!
}

"""@model"""
type Order {
  id: ID!

  """@db.type: 'timestamp'"""
  createdAt: DateTime!

  """@db.type: 'timestamp'"""
  updatedAt: DateTime!

  """@manyToOne field: 'orders', key: 'userId'"""
  user: User!

  """@oneToMany field: 'order', key: 'orderId'"""
  rows: [OrderRow!]!

  """@oneToMany field: 'order', key: 'orderId'"""
  discountCodes: [DiscountCode!]!
}

input OrderInput {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  user: ID
  userId: ID
}

"""@model"""
type OrderRow {
  id: ID!

  """@db.type: 'timestamp'"""
  createdAt: DateTime!

  """@db.type: 'timestamp'"""
  updatedAt: DateTime!

  """@db.default: 1"""
  quantity: Int!

  """@manyToOne field: 'rows', key: 'orderId'"""
  order: Order!

  """@manyToOne field: 'orders', key: 'productId'"""
  product: Product!
}

input OrderRowInput {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  quantity: Int
  order: ID
  product: ID
  orderId: ID
  productId: ID
}

"""@model"""
type Product {
  id: ID!

  """@db.type: 'timestamp'"""
  createdAt: DateTime!

  """@db.type: 'timestamp'"""
  updatedAt: DateTime!
  price: Int!
  name: String!
  slug: String!
  thumbnail: String!

  """@oneToMany field: 'product', key: 'productId'"""
  orders: [OrderRow]

  """@manyToOne field: 'products', key: 'brandId'"""
  brand: Brand
}

input ProductInput {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  price: Int
  name: String
  slug: String
  thumbnail: String
  brandId: ID
}

type Query {
  findAllUsers(limit: Int, offset: Int): [User]!
  findUsers(fields: UserInput, limit: Int, offset: Int): [User]!
  findAllOrders(limit: Int, offset: Int): [Order]!
  findOrders(fields: OrderInput, limit: Int, offset: Int): [Order]!
  findAllOrderRows(limit: Int, offset: Int): [OrderRow]!
  findOrderRows(fields: OrderRowInput, limit: Int, offset: Int): [OrderRow]!
  findAllProducts(limit: Int, offset: Int): [Product]!
  findProducts(fields: ProductInput, limit: Int, offset: Int): [Product]!
  findAllDiscountCodes(limit: Int, offset: Int): [DiscountCode]!
  findDiscountCodes(fields: DiscountCodeInput, limit: Int, offset: Int): [DiscountCode]!
  findAllBrands(limit: Int, offset: Int): [Brand]!
  findBrands(fields: BrandInput, limit: Int, offset: Int): [Brand]!
}

"""@model"""
type User {
  id: ID!

  """@db.unique"""
  email: String!
  password: String!
  name: String!

  """@oneToMany field: 'user', key: 'userId'"""
  orders: [Order]
}

input UserInput {
  id: ID
  email: String
  password: String
  name: String
}
